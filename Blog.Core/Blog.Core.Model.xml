<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blog.Core.Model</name>
    </assembly>
    <members>
        <member name="P:Blog.Core.Model.AdvertisementCopy.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Blog.Core.Model.AdvertisementCopy.ImgUrl">
            <summary>
            广告图片
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Blog.Core.Model.AdvertisementCopy.Title" -->
        <member name="P:Blog.Core.Model.AdvertisementCopy.Url">
            <summary>
            广告链接
            </summary>
        </member>
        <member name="P:Blog.Core.Model.AdvertisementCopy.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:Blog.Core.Model.AdvertisementCopy.Createdate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Advertisement.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Advertisement.ImgUrl">
            <summary>
            广告图片
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Blog.Core.Model.Advertisement.Title" -->
        <member name="P:Blog.Core.Model.Advertisement.Url">
            <summary>
            广告链接
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Advertisement.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Advertisement.Createdate">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Blog.Core.Model.RootEntity.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="T:Blog.Core.Model.Love">
            <summary>
            这是爱
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Love.Id">
            <summary>
            id
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Love.Name">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Love.Age">
            <summary>
            年龄
            </summary>
        </member>
        <member name="T:Blog.Core.Model.MessageModel`1">
            <summary>
            通用返回信息类
            </summary>
            <typeparam name="T">
            </typeparam>
        </member>
        <member name="P:Blog.Core.Model.MessageModel`1.Success">
            <summary>
            Gets or sets a value indicating whether success.
            </summary>
        </member>
        <member name="P:Blog.Core.Model.MessageModel`1.Msg">
            <summary>
            Gets or sets the msg.
            </summary>
        </member>
        <member name="P:Blog.Core.Model.MessageModel`1.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Models.BlogArticle.bID">
            <summary>
            主键
            </summary>
            这里之所以没用RootEntity，是想保持和之前的数据库一致，主键是bID，不是Id
        </member>
        <member name="P:Blog.Core.Model.Models.BlogArticle.bsubmitter">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Models.BlogArticle.btitle">
            <summary>
            标题blog
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Models.BlogArticle.bcategory">
            <summary>
            类别
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Models.BlogArticle.bcontent">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Models.BlogArticle.btraffic">
            <summary>
            访问量
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Models.BlogArticle.bcommentNum">
            <summary>
            评论数量
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Models.BlogArticle.bUpdateTime">
            <summary> 
            修改时间
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Models.BlogArticle.bCreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Models.BlogArticle.bRemark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Models.BlogArticle.IsDeleted">
            <summary>
            逻辑删除
            </summary>
        </member>
        <member name="M:Blog.Core.Model.Seed.DBSeed.SeedAsync(Blog.Core.Model.Seed.Blog.Core.Repository.MyContext)">
            <summary>
            异步添加种子数据
            </summary>
            <param name="myContext"></param>
            <returns></returns>
        </member>
        <member name="P:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.ConnectionString">
            <summary>
            连接字符串 
            Blog.Core
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.DbType">
            <summary>
            数据库类型 
            Blog.Core 
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.Db">
            <summary>
            数据连接对象 
            Blog.Core 
            </summary>
        </member>
        <member name="P:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.Context">
            <summary>
            数据库上下文实例（自动关闭连接）
            Blog.Core 
            </summary>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.#ctor">
            <summary>
            功能描述:构造函数
            作　　者:Blog.Core
            </summary>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.#ctor(System.Boolean)">
            <summary>
            功能描述:构造函数
            作　　者:Blog.Core
            </summary>
            <param name="blnIsAutoCloseConnection">是否自动关闭连接</param>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.GetEntityDB``1">
            <summary>
            功能描述:获取数据库处理对象
            作　　者:Blog.Core
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.GetEntityDB``1(SqlSugar.SqlSugarClient)">
            <summary>
            功能描述:获取数据库处理对象
            作　　者:Blog.Core
            </summary>
            <param name="db">db</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.CreateClassFileByDBTalbe(System.String)">
            <summary>
            功能描述:根据数据库表生产实体类
            作　　者:Blog.Core
            </summary>       
            <param name="strPath">实体类存放路径</param>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.CreateClassFileByDBTalbe(System.String,System.String)">
            <summary>
            功能描述:根据数据库表生产实体类
            作　　者:Blog.Core
            </summary>
            <param name="strPath">实体类存放路径</param>
            <param name="strNameSpace">命名空间</param>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.CreateClassFileByDBTalbe(System.String,System.String,System.String[])">
            <summary>
            功能描述:根据数据库表生产实体类
            作　　者:Blog.Core
            </summary>
            <param name="strPath">实体类存放路径</param>
            <param name="strNameSpace">命名空间</param>
            <param name="lstTableNames">生产指定的表</param>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.CreateClassFileByDBTalbe(System.String,System.String,System.String[],System.String,System.Boolean)">
            <summary>
            功能描述:根据数据库表生产实体类
            作　　者:Blog.Core
            </summary>
            <param name="strPath">实体类存放路径</param>
            <param name="strNameSpace">命名空间</param>
            <param name="lstTableNames">生产指定的表</param>
            <param name="strInterface">实现接口</param>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.CreateTableByEntity``1(System.Boolean,``0[])">
            <summary>
            功能描述:根据实体类生成数据库表
            作　　者:Blog.Core
            </summary>
            <param name="blnBackupTable">是否备份表</param>
            <param name="lstEntitys">指定的实体</param>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.CreateTableByEntity(System.Boolean,System.Type[])">
            <summary>
            功能描述:根据实体类生成数据库表
            作　　者:Blog.Core
            </summary>
            <param name="blnBackupTable">是否备份表</param>
            <param name="lstEntitys">指定的实体</param>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.GetDbContext(System.Boolean)">
            <summary>
            功能描述:获得一个DbContext
            作　　者:Blog.Core
            </summary>
            <param name="blnIsAutoCloseConnection">是否自动关闭连接（如果为false，则使用接受时需要手动关闭Db）</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.Init(System.String,SqlSugar.DbType)">
            <summary>
            功能描述:设置初始化参数
            作　　者:Blog.Core
            </summary>
            <param name="strConnectionString">连接字符串</param>
            <param name="enmDbType">数据库类型</param>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.GetConnectionConfig(System.Boolean,System.Boolean)">
            <summary>
            功能描述:创建一个链接配置
            作　　者:Blog.Core
            </summary>
            <param name="blnIsAutoCloseConnection">是否自动关闭连接</param>
            <param name="blnIsShardSameThread">是否夸类事务</param>
            <returns>ConnectionConfig</returns>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.GetCustomDB(SqlSugar.ConnectionConfig)">
            <summary>
            功能描述:获取一个自定义的DB
            作　　者:Blog.Core
            </summary>
            <param name="config">config</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.GetCustomEntityDB``1(SqlSugar.SqlSugarClient)">
            <summary>
            功能描述:获取一个自定义的数据库处理对象
            作　　者:Blog.Core
            </summary>
            <param name="sugarClient">sugarClient</param>
            <returns>返回值</returns>
        </member>
        <member name="M:Blog.Core.Model.Seed.Blog.Core.Repository.MyContext.GetCustomEntityDB``1(SqlSugar.ConnectionConfig)">
            <summary>
            功能描述:获取一个自定义的数据库处理对象
            作　　者:Blog.Core
            </summary>
            <param name="config">config</param>
            <returns>返回值</returns>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.bID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.bsubmitter">
            <summary>/// 创建人
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.btitle">
            <summary>/// 博客标题
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.digest">
            <summary>/// 摘要
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.previous">
            <summary>
            上一篇
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.previousID">
            <summary>
            上一篇id
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.next">
            <summary>
            下一篇
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.nextID">
            <summary>
            下一篇id
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.bcategory">
            <summary>/// 类别
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.bcontent">
            <summary>/// 内容
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.btraffic">
            <summary>
            访问量
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.bcommentNum">
            <summary>
            评论数量
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.bUpdateTime">
            <summary>/// 修改时间
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.bCreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Blog.Core.Model.ViewModels.BlogViewModels.bRemark">
            <summary>/// 备注
            </summary>
        </member>
        <member name="M:UtilConvert.ObjToInt(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilConvert.ObjToInt(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilConvert.ObjToMoney(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilConvert.ObjToMoney(System.Object,System.Double)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilConvert.ObjToString(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilConvert.ObjToString(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilConvert.ObjToDecimal(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilConvert.ObjToDecimal(System.Object,System.Decimal)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilConvert.ObjToDate(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilConvert.ObjToDate(System.Object,System.DateTime)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:UtilConvert.ObjToBool(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
    </members>
</doc>
